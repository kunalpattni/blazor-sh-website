@page "/notes"
@using BlazorShWebsite.Client.Js
@using BlazorShWebsite.Shared.Notes
@using BlazorShWebsite.Shared.Shared
@using Microsoft.AspNetCore.SignalR.Client
@inject HubManager HubManager
@inject LocalStorage LocalStorage
@implements IAsyncDisposable

<PageTitle>Notes</PageTitle>
<div class="home-wrapper">
    <h1>Notes</h1>
    <p>State: @HubManager.State.ToString()</p>
    <p>Is Interactive: @RendererInfo.IsInteractive</p>
    <p>Platform Name: @RendererInfo.Name</p>
    <p>AssignedRenderMode: @AssignedRenderMode.ToString()</p>
    <p>@(OperatingSystem.IsBrowser() ? "Browser" : "Server")</p>
    @if (RendererInfo.IsInteractive)
    {
        <textarea @bind="_key"></textarea>
        <textarea @bind="_value"></textarea>
    
        <button @onclick="AddToLocalStorage">Add</button>
        
        
        
        @foreach (var item in _localStorageItems)
        {
            <p>@item</p>
        }
    }

    @{
        List<string> notes = new();
    }
    @foreach (var note in notes)
    {
        <p>@note</p>
    }
    <textarea @bind="_model.Input"></textarea>
    <button @onclick="Send">@(RendererInfo.IsInteractive ? "Send" : "Wait")</button>
</div>

@code {
    private Model _model = new();
    private string _key;
    private string _value;
    private int _localStorageLength;
    private List<string> _localStorageItems = new();
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Yield();
            StateHasChanged();
        }
    }
    
    public bool IsConnected => HubManager?.State == HubConnectionState.Connected;

    private async Task Send()
    {
        await HubManager.Send(_model);
    }

    public async Task AddToLocalStorage()
    {
        await LocalStorage.SetItem(_key, _value); 
        _localStorageLength = await LocalStorage.Length();
        _localStorageItems = [];
        for (var i = 0; i < _localStorageLength; i++)
        {
            var key = await LocalStorage.Key(i);
            var value = await LocalStorage.GetItem(key!);
            _localStorageItems.Add($"{key}: {value}");
        }
    }

    public async ValueTask DisposeAsync()
    {
        await HubManager.DisposeAsync();
        await Task.CompletedTask;
    }

}