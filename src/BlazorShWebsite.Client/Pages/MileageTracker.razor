@page "/mileage"
@inherits BlazorShWebsite.Client.EveryPage.PageComponent
@using System.Collections.Immutable
@using BlazorShWebsite.Client.Components
@using BlazorShWebsite.Client.Services.Mileage

@{
    var title = "Mileage Tracker";
    ImmutableList<string> infoParagraphs = [
        "I wanted to see what it would be like to animate elements on a page by modifying their attributes in C# and not using JS interop.", 
        "Turns out, it'd definitely possible but it's is limited to being CPU bound and unreliable. You can get a decent framerate but you should definitely use the JS APIs instead like requestAnimationFrame or Element,animate() that can utilise the browsers optimised animation system.",
        "Speaking of requestAnimationFrame or Element,animate(), I'll probably try to implement JsInterop for these soon and produce another demo of that. For now, CSS animations will do the job."
    ];
}

<SuffixedPageTitle Title="@title" />

<HeadContent>
    <meta name="description" content="Animating multiple balls written only in C# using blazor wasm">
</HeadContent>

<div class="mileage-tracker-wrapper">
    <StylesForMileageTracker/>
    <div class="row">
        <div class="input">
            <label for="initial-mileage">Initial Mileage</label>
            <input id="initial-mileage" type="number" @oninput="e => OnPageInputEventHandler(e, MileageInputId.InitialMileage)"/>
        </div>
        <div class="input">
            <label for="contracted-miles">Contracted miles</label>
            <input id="contracted-miles" type="number" @oninput="e => OnPageInputEventHandler(e, MileageInputId.InitialMileage)"/>
        </div>
    </div>
    <table>
        <tr>
            <th><label for="fill-date">Fill Date</label></th>
            <th><label for="current-mileage">Current mileage</label></th>
            <th><label for="price-per-litre">Price per litre</label></th>
            <th><label for="total-price">Total Price</label></th>
            <th>
                <div class="label">Litres filled</div></th>
            <th>
                <div class="label">Cost per mile</div></th>
            <th>
                <div class="label">Days since last fill</div></th>
            <th>
                <div class="label">Cost per day</div></th>
        </tr>
        @for (var i = 0; i < _rowInputs.Count; i++)
        {
            var rowId = i;
            <tr>
                <td><input id="fill-date" type="date" @oninput="e => OnRowInputEventHandler(e, rowId, MileageRowInputId.FillDate)"/></td>
                <td><input id="current-mileage" type="number" @oninput="e => OnRowInputEventHandler(e, rowId, MileageRowInputId.CurrentMileage)"/></td>
                <td><input id="price-per-litre" type="number" step="0.01" @oninput="e => OnRowInputEventHandler(e, rowId, MileageRowInputId.PricePerLitre)"/></td>
                <td><input id="total-price" type="number" step="0.01" @oninput="e => OnRowInputEventHandler(e, rowId, MileageRowInputId.TotalPrice)"/></td>
                <td>
                    <div class="value" id="litres-filled">@_rowInputs[rowId].LitresFilled</div></td>
                <td>
                    <div class="value" id="cost-per-mile">@_rowInputs[rowId].CostPerMile(0)</div></td>
                <td>
                    <div class="value" id="days-since-last-filled">@_rowInputs[rowId].DaysSinceLastFill(null)</div></td>
                <td>
                    <div class="value" id="cost-per-day">@_rowInputs[rowId].CostPerDay(null)</div></td>
            </tr>
        }
    </table>
    <button class="inline" @onclick="AddRow">Add Row</button>
    <InformationPanel Title="@title" Paragraphs="@infoParagraphs"/>
</div>